package com.chess.client;


import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import com.chess.client.account.AccountController;
import com.chess.common.Account;
import com.chess.common.messages.Message;
import com.chess.common.messages.PlayerList;
import com.chess.common.messages.SendableMessage;
import com.chess.common.messages.StatusUpdate;
import com.chess.common.messages.StatusUpdate.StatusType;
import com.chess.common.messages.login.LoginResult;
import com.chess.common.messages.login.RegisterResult;

import javafx.application.Platform;

public class Client {

	private final String address;
	private final int port;
	private Socket socket;
	private ObjectOutputStream out;
	private List<Account> onlineUsers = new ArrayList<>();
	
	/**
	 * Create a new client and his socket
	 * 
	 * @param address the address of the server
	 * @param port the port of the server
	 */
	public Client(String address, int port) {
		this.address = address;
		this.port = port;
		try {
			System.out.println("Creating sockets for " + address + ":" + port);
			this.socket = new Socket(address, port);
			this.out = new ObjectOutputStream(socket.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		new Thread(new ClientReceive(this, socket)).start();
	}
	
	/**
	 * Get server address
	 * 
	 * @return server address
	 */
	public String getAddress() {
		return address;
	}
	
	/**
	 * Get the port of the server
	 * 
	 * @return the port server
	 */
	public int getPort() {
		return port;
	}
	
	/**
	 * Get the stream which goes out
	 * (direction: the server)
	 * 
	 * @return the output stream to the server
	 */
	public ObjectOutputStream getOut() {
		return out;
	}
	
	/**
	 * Disconnect client to the server
	 */
	public void disconnectServer() {
		try {
			if(out != null)
				out.close();
			if(socket != null)
				socket.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Get users ID (generated by the server) and their name
	 * 
	 * @return online users
	 */
	public List<Account> getOnlineUsers() {
		return onlineUsers;
	}
	
	public void sendMessage(SendableMessage mess)
	{
		System.out.println("Sending message: " + mess.getClass().getCanonicalName());
		try {
			getOut().writeObject(mess);
			getOut().flush();
		} catch (Exception exc) {
			exc.printStackTrace();
		}
	}

	/**
	 * Manage the message which have been received
	 * 
	 * @param mess the message which have been received
	 */
	public void messageReceived(SendableMessage mess) {
		System.out.println("Message received: " + mess);
		//Message rawResult = new Message();
		
		if(mess instanceof StatusUpdate) 
		{
			StatusUpdate state = (StatusUpdate) mess;
			if(state.getType().equals(StatusType.LOGIN)) 
			{
				onlineUsers.add(state.getSender());
			}
			else 
			{
				onlineUsers.remove(state.getSender());
			}
			/*rawResult.setSender(state.getSender());
			rawResult.setMessage(state.toShow());*/
			Platform.runLater(() -> VisualApplication.getApplication().getAccountPanel().load());
		} else if(mess instanceof Message) {
			Platform.runLater(() -> {
				Message m = (Message) mess;
				if(m.getWith() == null)
					VisualApplication.getApplication().getGeneralChatPanel().getChatCTRL().printMessage(m);
				else
					VisualApplication.getApplication().getPrivateChatPanel().getChatCTRL().printMessage(m);
			});
			//rawResult = (Message) mess;
		} else if(mess instanceof LoginResult) {
			AccountController.manageConnect((LoginResult) mess);
		} else if(mess instanceof RegisterResult) {
			AccountController.manageRegister((RegisterResult) mess);
		} else if(mess instanceof PlayerList) {
			onlineUsers = ((PlayerList) mess).getAll();
			Platform.runLater(() -> VisualApplication.getApplication().getAccountPanel().load());
		} else if(mess.getSender() != Account.SERVER_ACCOUNT){
			onlineUsers.add(mess.getSender());
		}
		/*final Message result = rawResult;
		try {
			if(view != null)
				Platform.runLater(() -> view.getChatCTRL().printMessage(view.getReceivedText(),result));
		} catch (Exception e) {
			
		}*/
	}
}
